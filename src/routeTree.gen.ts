/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard/dashboard'
import { Route as CompanyCompanyRouteImport } from './routes/_company/company'
import { Route as AuthAuthRouteImport } from './routes/_auth/auth'
import { Route as DashboardDashboardIndexRouteImport } from './routes/_dashboard/dashboard.index'
import { Route as CompanyCompanyIndexRouteImport } from './routes/_company/company.index'
import { Route as AuthAuthIndexRouteImport } from './routes/_auth/auth.index'
import { Route as DashboardDashboardProfileRouteImport } from './routes/_dashboard/dashboard.profile'
import { Route as DashboardDashboardInvitesRouteImport } from './routes/_dashboard/dashboard.invites'
import { Route as DashboardDashboardDocsRouteImport } from './routes/_dashboard/dashboard.docs'
import { Route as CompanyCompanyProfileRouteImport } from './routes/_company/company.profile'
import { Route as AuthAuthResetRouteImport } from './routes/_auth/auth.reset'
import { Route as AuthAuthRegisterRouteImport } from './routes/_auth/auth.register'
import { Route as AuthAuthForgotRouteImport } from './routes/_auth/auth.forgot'
import { Route as AdminAdminDashboardRouteImport } from './routes/_admin/admin.dashboard'
import { Route as AdminAdminAuthRouteImport } from './routes/_admin/admin.auth'
import { Route as CompanyCompanyTeamGeneralRegisterRouteImport } from './routes/_company/company.team/general-register'
import { Route as CompanyCompanyTeamFeedbacksRouteImport } from './routes/_company/company.team/feedbacks'
import { Route as CompanyCompanyTeamEvaluationsRouteImport } from './routes/_company/company.team/evaluations'
import { Route as CompanyCompanyTeamCompetenciesBoardRouteImport } from './routes/_company/company.team/competencies-board'
import { Route as CompanyCompanyArchiveRolesRouteImport } from './routes/_company/company.archive/roles'
import { Route as CompanyCompanyArchiveRewardsRouteImport } from './routes/_company/company.archive/rewards'
import { Route as CompanyCompanyArchivePerformanceRouteImport } from './routes/_company/company.archive/performance'
import { Route as CompanyCompanyArchiveManualsRouteImport } from './routes/_company/company.archive/manuals'
import { Route as CompanyCompanyArchiveDepartmentsRouteImport } from './routes/_company/company.archive/departments'
import { Route as CompanyCompanyArchiveCommunicationRouteImport } from './routes/_company/company.archive/communication'
import { Route as CompanyCompanyArchiveBenefitsRouteImport } from './routes/_company/company.archive/benefits'
import { Route as CompanyCompanySettingsSettingsRouteImport } from './routes/_company/company._settings/settings'
import { Route as CompanyCompanySettingsSettingsIndexRouteImport } from './routes/_company/company._settings/settings.index'
import { Route as CompanyCompanySettingsSettingsAppearanceRouteImport } from './routes/_company/company._settings/settings.appearance'

const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/_dashboard/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyCompanyRoute = CompanyCompanyRouteImport.update({
  id: '/_company/company',
  path: '/company',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthRoute = AuthAuthRouteImport.update({
  id: '/_auth/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardDashboardIndexRoute = DashboardDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardDashboardRoute,
} as any)
const CompanyCompanyIndexRoute = CompanyCompanyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CompanyCompanyRoute,
} as any)
const AuthAuthIndexRoute = AuthAuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthAuthRoute,
} as any)
const DashboardDashboardProfileRoute =
  DashboardDashboardProfileRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => DashboardDashboardRoute,
  } as any)
const DashboardDashboardInvitesRoute =
  DashboardDashboardInvitesRouteImport.update({
    id: '/invites',
    path: '/invites',
    getParentRoute: () => DashboardDashboardRoute,
  } as any)
const DashboardDashboardDocsRoute = DashboardDashboardDocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => DashboardDashboardRoute,
} as any)
const CompanyCompanyProfileRoute = CompanyCompanyProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => CompanyCompanyRoute,
} as any)
const AuthAuthResetRoute = AuthAuthResetRouteImport.update({
  id: '/reset',
  path: '/reset',
  getParentRoute: () => AuthAuthRoute,
} as any)
const AuthAuthRegisterRoute = AuthAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthAuthRoute,
} as any)
const AuthAuthForgotRoute = AuthAuthForgotRouteImport.update({
  id: '/forgot',
  path: '/forgot',
  getParentRoute: () => AuthAuthRoute,
} as any)
const AdminAdminDashboardRoute = AdminAdminDashboardRouteImport.update({
  id: '/_admin/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAdminAuthRoute = AdminAdminAuthRouteImport.update({
  id: '/_admin/admin/auth',
  path: '/admin/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyCompanyTeamGeneralRegisterRoute =
  CompanyCompanyTeamGeneralRegisterRouteImport.update({
    id: '/team/general-register',
    path: '/team/general-register',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyTeamFeedbacksRoute =
  CompanyCompanyTeamFeedbacksRouteImport.update({
    id: '/team/feedbacks',
    path: '/team/feedbacks',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyTeamEvaluationsRoute =
  CompanyCompanyTeamEvaluationsRouteImport.update({
    id: '/team/evaluations',
    path: '/team/evaluations',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyTeamCompetenciesBoardRoute =
  CompanyCompanyTeamCompetenciesBoardRouteImport.update({
    id: '/team/competencies-board',
    path: '/team/competencies-board',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveRolesRoute =
  CompanyCompanyArchiveRolesRouteImport.update({
    id: '/archive/roles',
    path: '/archive/roles',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveRewardsRoute =
  CompanyCompanyArchiveRewardsRouteImport.update({
    id: '/archive/rewards',
    path: '/archive/rewards',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchivePerformanceRoute =
  CompanyCompanyArchivePerformanceRouteImport.update({
    id: '/archive/performance',
    path: '/archive/performance',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveManualsRoute =
  CompanyCompanyArchiveManualsRouteImport.update({
    id: '/archive/manuals',
    path: '/archive/manuals',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveDepartmentsRoute =
  CompanyCompanyArchiveDepartmentsRouteImport.update({
    id: '/archive/departments',
    path: '/archive/departments',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveCommunicationRoute =
  CompanyCompanyArchiveCommunicationRouteImport.update({
    id: '/archive/communication',
    path: '/archive/communication',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanyArchiveBenefitsRoute =
  CompanyCompanyArchiveBenefitsRouteImport.update({
    id: '/archive/benefits',
    path: '/archive/benefits',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanySettingsSettingsRoute =
  CompanyCompanySettingsSettingsRouteImport.update({
    id: '/_settings/settings',
    path: '/settings',
    getParentRoute: () => CompanyCompanyRoute,
  } as any)
const CompanyCompanySettingsSettingsIndexRoute =
  CompanyCompanySettingsSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CompanyCompanySettingsSettingsRoute,
  } as any)
const CompanyCompanySettingsSettingsAppearanceRoute =
  CompanyCompanySettingsSettingsAppearanceRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => CompanyCompanySettingsSettingsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthAuthRouteWithChildren
  '/company': typeof CompanyCompanyRouteWithChildren
  '/dashboard': typeof DashboardDashboardRouteWithChildren
  '/admin/auth': typeof AdminAdminAuthRoute
  '/admin/dashboard': typeof AdminAdminDashboardRoute
  '/auth/forgot': typeof AuthAuthForgotRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/auth/reset': typeof AuthAuthResetRoute
  '/company/profile': typeof CompanyCompanyProfileRoute
  '/dashboard/docs': typeof DashboardDashboardDocsRoute
  '/dashboard/invites': typeof DashboardDashboardInvitesRoute
  '/dashboard/profile': typeof DashboardDashboardProfileRoute
  '/auth/': typeof AuthAuthIndexRoute
  '/company/': typeof CompanyCompanyIndexRoute
  '/dashboard/': typeof DashboardDashboardIndexRoute
  '/company/settings': typeof CompanyCompanySettingsSettingsRouteWithChildren
  '/company/archive/benefits': typeof CompanyCompanyArchiveBenefitsRoute
  '/company/archive/communication': typeof CompanyCompanyArchiveCommunicationRoute
  '/company/archive/departments': typeof CompanyCompanyArchiveDepartmentsRoute
  '/company/archive/manuals': typeof CompanyCompanyArchiveManualsRoute
  '/company/archive/performance': typeof CompanyCompanyArchivePerformanceRoute
  '/company/archive/rewards': typeof CompanyCompanyArchiveRewardsRoute
  '/company/archive/roles': typeof CompanyCompanyArchiveRolesRoute
  '/company/team/competencies-board': typeof CompanyCompanyTeamCompetenciesBoardRoute
  '/company/team/evaluations': typeof CompanyCompanyTeamEvaluationsRoute
  '/company/team/feedbacks': typeof CompanyCompanyTeamFeedbacksRoute
  '/company/team/general-register': typeof CompanyCompanyTeamGeneralRegisterRoute
  '/company/settings/appearance': typeof CompanyCompanySettingsSettingsAppearanceRoute
  '/company/settings/': typeof CompanyCompanySettingsSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/admin/auth': typeof AdminAdminAuthRoute
  '/admin/dashboard': typeof AdminAdminDashboardRoute
  '/auth/forgot': typeof AuthAuthForgotRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/auth/reset': typeof AuthAuthResetRoute
  '/company/profile': typeof CompanyCompanyProfileRoute
  '/dashboard/docs': typeof DashboardDashboardDocsRoute
  '/dashboard/invites': typeof DashboardDashboardInvitesRoute
  '/dashboard/profile': typeof DashboardDashboardProfileRoute
  '/auth': typeof AuthAuthIndexRoute
  '/company': typeof CompanyCompanyIndexRoute
  '/dashboard': typeof DashboardDashboardIndexRoute
  '/company/archive/benefits': typeof CompanyCompanyArchiveBenefitsRoute
  '/company/archive/communication': typeof CompanyCompanyArchiveCommunicationRoute
  '/company/archive/departments': typeof CompanyCompanyArchiveDepartmentsRoute
  '/company/archive/manuals': typeof CompanyCompanyArchiveManualsRoute
  '/company/archive/performance': typeof CompanyCompanyArchivePerformanceRoute
  '/company/archive/rewards': typeof CompanyCompanyArchiveRewardsRoute
  '/company/archive/roles': typeof CompanyCompanyArchiveRolesRoute
  '/company/team/competencies-board': typeof CompanyCompanyTeamCompetenciesBoardRoute
  '/company/team/evaluations': typeof CompanyCompanyTeamEvaluationsRoute
  '/company/team/feedbacks': typeof CompanyCompanyTeamFeedbacksRoute
  '/company/team/general-register': typeof CompanyCompanyTeamGeneralRegisterRoute
  '/company/settings/appearance': typeof CompanyCompanySettingsSettingsAppearanceRoute
  '/company/settings': typeof CompanyCompanySettingsSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth/auth': typeof AuthAuthRouteWithChildren
  '/_company/company': typeof CompanyCompanyRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRouteWithChildren
  '/_admin/admin/auth': typeof AdminAdminAuthRoute
  '/_admin/admin/dashboard': typeof AdminAdminDashboardRoute
  '/_auth/auth/forgot': typeof AuthAuthForgotRoute
  '/_auth/auth/register': typeof AuthAuthRegisterRoute
  '/_auth/auth/reset': typeof AuthAuthResetRoute
  '/_company/company/profile': typeof CompanyCompanyProfileRoute
  '/_dashboard/dashboard/docs': typeof DashboardDashboardDocsRoute
  '/_dashboard/dashboard/invites': typeof DashboardDashboardInvitesRoute
  '/_dashboard/dashboard/profile': typeof DashboardDashboardProfileRoute
  '/_auth/auth/': typeof AuthAuthIndexRoute
  '/_company/company/': typeof CompanyCompanyIndexRoute
  '/_dashboard/dashboard/': typeof DashboardDashboardIndexRoute
  '/_company/company/_settings/settings': typeof CompanyCompanySettingsSettingsRouteWithChildren
  '/_company/company/archive/benefits': typeof CompanyCompanyArchiveBenefitsRoute
  '/_company/company/archive/communication': typeof CompanyCompanyArchiveCommunicationRoute
  '/_company/company/archive/departments': typeof CompanyCompanyArchiveDepartmentsRoute
  '/_company/company/archive/manuals': typeof CompanyCompanyArchiveManualsRoute
  '/_company/company/archive/performance': typeof CompanyCompanyArchivePerformanceRoute
  '/_company/company/archive/rewards': typeof CompanyCompanyArchiveRewardsRoute
  '/_company/company/archive/roles': typeof CompanyCompanyArchiveRolesRoute
  '/_company/company/team/competencies-board': typeof CompanyCompanyTeamCompetenciesBoardRoute
  '/_company/company/team/evaluations': typeof CompanyCompanyTeamEvaluationsRoute
  '/_company/company/team/feedbacks': typeof CompanyCompanyTeamFeedbacksRoute
  '/_company/company/team/general-register': typeof CompanyCompanyTeamGeneralRegisterRoute
  '/_company/company/_settings/settings/appearance': typeof CompanyCompanySettingsSettingsAppearanceRoute
  '/_company/company/_settings/settings/': typeof CompanyCompanySettingsSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/company'
    | '/dashboard'
    | '/admin/auth'
    | '/admin/dashboard'
    | '/auth/forgot'
    | '/auth/register'
    | '/auth/reset'
    | '/company/profile'
    | '/dashboard/docs'
    | '/dashboard/invites'
    | '/dashboard/profile'
    | '/auth/'
    | '/company/'
    | '/dashboard/'
    | '/company/settings'
    | '/company/archive/benefits'
    | '/company/archive/communication'
    | '/company/archive/departments'
    | '/company/archive/manuals'
    | '/company/archive/performance'
    | '/company/archive/rewards'
    | '/company/archive/roles'
    | '/company/team/competencies-board'
    | '/company/team/evaluations'
    | '/company/team/feedbacks'
    | '/company/team/general-register'
    | '/company/settings/appearance'
    | '/company/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin/auth'
    | '/admin/dashboard'
    | '/auth/forgot'
    | '/auth/register'
    | '/auth/reset'
    | '/company/profile'
    | '/dashboard/docs'
    | '/dashboard/invites'
    | '/dashboard/profile'
    | '/auth'
    | '/company'
    | '/dashboard'
    | '/company/archive/benefits'
    | '/company/archive/communication'
    | '/company/archive/departments'
    | '/company/archive/manuals'
    | '/company/archive/performance'
    | '/company/archive/rewards'
    | '/company/archive/roles'
    | '/company/team/competencies-board'
    | '/company/team/evaluations'
    | '/company/team/feedbacks'
    | '/company/team/general-register'
    | '/company/settings/appearance'
    | '/company/settings'
  id:
    | '__root__'
    | '/_auth/auth'
    | '/_company/company'
    | '/_dashboard/dashboard'
    | '/_admin/admin/auth'
    | '/_admin/admin/dashboard'
    | '/_auth/auth/forgot'
    | '/_auth/auth/register'
    | '/_auth/auth/reset'
    | '/_company/company/profile'
    | '/_dashboard/dashboard/docs'
    | '/_dashboard/dashboard/invites'
    | '/_dashboard/dashboard/profile'
    | '/_auth/auth/'
    | '/_company/company/'
    | '/_dashboard/dashboard/'
    | '/_company/company/_settings/settings'
    | '/_company/company/archive/benefits'
    | '/_company/company/archive/communication'
    | '/_company/company/archive/departments'
    | '/_company/company/archive/manuals'
    | '/_company/company/archive/performance'
    | '/_company/company/archive/rewards'
    | '/_company/company/archive/roles'
    | '/_company/company/team/competencies-board'
    | '/_company/company/team/evaluations'
    | '/_company/company/team/feedbacks'
    | '/_company/company/team/general-register'
    | '/_company/company/_settings/settings/appearance'
    | '/_company/company/_settings/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthAuthRoute: typeof AuthAuthRouteWithChildren
  CompanyCompanyRoute: typeof CompanyCompanyRouteWithChildren
  DashboardDashboardRoute: typeof DashboardDashboardRouteWithChildren
  AdminAdminAuthRoute: typeof AdminAdminAuthRoute
  AdminAdminDashboardRoute: typeof AdminAdminDashboardRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_company/company': {
      id: '/_company/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyCompanyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/auth': {
      id: '/_auth/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/dashboard/': {
      id: '/_dashboard/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardDashboardIndexRouteImport
      parentRoute: typeof DashboardDashboardRoute
    }
    '/_company/company/': {
      id: '/_company/company/'
      path: '/'
      fullPath: '/company/'
      preLoaderRoute: typeof CompanyCompanyIndexRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_auth/auth/': {
      id: '/_auth/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthAuthIndexRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/_dashboard/dashboard/profile': {
      id: '/_dashboard/dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardDashboardProfileRouteImport
      parentRoute: typeof DashboardDashboardRoute
    }
    '/_dashboard/dashboard/invites': {
      id: '/_dashboard/dashboard/invites'
      path: '/invites'
      fullPath: '/dashboard/invites'
      preLoaderRoute: typeof DashboardDashboardInvitesRouteImport
      parentRoute: typeof DashboardDashboardRoute
    }
    '/_dashboard/dashboard/docs': {
      id: '/_dashboard/dashboard/docs'
      path: '/docs'
      fullPath: '/dashboard/docs'
      preLoaderRoute: typeof DashboardDashboardDocsRouteImport
      parentRoute: typeof DashboardDashboardRoute
    }
    '/_company/company/profile': {
      id: '/_company/company/profile'
      path: '/profile'
      fullPath: '/company/profile'
      preLoaderRoute: typeof CompanyCompanyProfileRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_auth/auth/reset': {
      id: '/_auth/auth/reset'
      path: '/reset'
      fullPath: '/auth/reset'
      preLoaderRoute: typeof AuthAuthResetRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/_auth/auth/register': {
      id: '/_auth/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthAuthRegisterRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/_auth/auth/forgot': {
      id: '/_auth/auth/forgot'
      path: '/forgot'
      fullPath: '/auth/forgot'
      preLoaderRoute: typeof AuthAuthForgotRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/_admin/admin/dashboard': {
      id: '/_admin/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminAdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/admin/auth': {
      id: '/_admin/admin/auth'
      path: '/admin/auth'
      fullPath: '/admin/auth'
      preLoaderRoute: typeof AdminAdminAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_company/company/team/general-register': {
      id: '/_company/company/team/general-register'
      path: '/team/general-register'
      fullPath: '/company/team/general-register'
      preLoaderRoute: typeof CompanyCompanyTeamGeneralRegisterRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/team/feedbacks': {
      id: '/_company/company/team/feedbacks'
      path: '/team/feedbacks'
      fullPath: '/company/team/feedbacks'
      preLoaderRoute: typeof CompanyCompanyTeamFeedbacksRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/team/evaluations': {
      id: '/_company/company/team/evaluations'
      path: '/team/evaluations'
      fullPath: '/company/team/evaluations'
      preLoaderRoute: typeof CompanyCompanyTeamEvaluationsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/team/competencies-board': {
      id: '/_company/company/team/competencies-board'
      path: '/team/competencies-board'
      fullPath: '/company/team/competencies-board'
      preLoaderRoute: typeof CompanyCompanyTeamCompetenciesBoardRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/roles': {
      id: '/_company/company/archive/roles'
      path: '/archive/roles'
      fullPath: '/company/archive/roles'
      preLoaderRoute: typeof CompanyCompanyArchiveRolesRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/rewards': {
      id: '/_company/company/archive/rewards'
      path: '/archive/rewards'
      fullPath: '/company/archive/rewards'
      preLoaderRoute: typeof CompanyCompanyArchiveRewardsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/performance': {
      id: '/_company/company/archive/performance'
      path: '/archive/performance'
      fullPath: '/company/archive/performance'
      preLoaderRoute: typeof CompanyCompanyArchivePerformanceRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/manuals': {
      id: '/_company/company/archive/manuals'
      path: '/archive/manuals'
      fullPath: '/company/archive/manuals'
      preLoaderRoute: typeof CompanyCompanyArchiveManualsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/departments': {
      id: '/_company/company/archive/departments'
      path: '/archive/departments'
      fullPath: '/company/archive/departments'
      preLoaderRoute: typeof CompanyCompanyArchiveDepartmentsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/communication': {
      id: '/_company/company/archive/communication'
      path: '/archive/communication'
      fullPath: '/company/archive/communication'
      preLoaderRoute: typeof CompanyCompanyArchiveCommunicationRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/archive/benefits': {
      id: '/_company/company/archive/benefits'
      path: '/archive/benefits'
      fullPath: '/company/archive/benefits'
      preLoaderRoute: typeof CompanyCompanyArchiveBenefitsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/_settings/settings': {
      id: '/_company/company/_settings/settings'
      path: '/settings'
      fullPath: '/company/settings'
      preLoaderRoute: typeof CompanyCompanySettingsSettingsRouteImport
      parentRoute: typeof CompanyCompanyRoute
    }
    '/_company/company/_settings/settings/': {
      id: '/_company/company/_settings/settings/'
      path: '/'
      fullPath: '/company/settings/'
      preLoaderRoute: typeof CompanyCompanySettingsSettingsIndexRouteImport
      parentRoute: typeof CompanyCompanySettingsSettingsRoute
    }
    '/_company/company/_settings/settings/appearance': {
      id: '/_company/company/_settings/settings/appearance'
      path: '/appearance'
      fullPath: '/company/settings/appearance'
      preLoaderRoute: typeof CompanyCompanySettingsSettingsAppearanceRouteImport
      parentRoute: typeof CompanyCompanySettingsSettingsRoute
    }
  }
}

interface AuthAuthRouteChildren {
  AuthAuthForgotRoute: typeof AuthAuthForgotRoute
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute
  AuthAuthResetRoute: typeof AuthAuthResetRoute
  AuthAuthIndexRoute: typeof AuthAuthIndexRoute
}

const AuthAuthRouteChildren: AuthAuthRouteChildren = {
  AuthAuthForgotRoute: AuthAuthForgotRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
  AuthAuthResetRoute: AuthAuthResetRoute,
  AuthAuthIndexRoute: AuthAuthIndexRoute,
}

const AuthAuthRouteWithChildren = AuthAuthRoute._addFileChildren(
  AuthAuthRouteChildren,
)

interface CompanyCompanySettingsSettingsRouteChildren {
  CompanyCompanySettingsSettingsAppearanceRoute: typeof CompanyCompanySettingsSettingsAppearanceRoute
  CompanyCompanySettingsSettingsIndexRoute: typeof CompanyCompanySettingsSettingsIndexRoute
}

const CompanyCompanySettingsSettingsRouteChildren: CompanyCompanySettingsSettingsRouteChildren =
  {
    CompanyCompanySettingsSettingsAppearanceRoute:
      CompanyCompanySettingsSettingsAppearanceRoute,
    CompanyCompanySettingsSettingsIndexRoute:
      CompanyCompanySettingsSettingsIndexRoute,
  }

const CompanyCompanySettingsSettingsRouteWithChildren =
  CompanyCompanySettingsSettingsRoute._addFileChildren(
    CompanyCompanySettingsSettingsRouteChildren,
  )

interface CompanyCompanyRouteChildren {
  CompanyCompanyProfileRoute: typeof CompanyCompanyProfileRoute
  CompanyCompanyIndexRoute: typeof CompanyCompanyIndexRoute
  CompanyCompanySettingsSettingsRoute: typeof CompanyCompanySettingsSettingsRouteWithChildren
  CompanyCompanyArchiveBenefitsRoute: typeof CompanyCompanyArchiveBenefitsRoute
  CompanyCompanyArchiveCommunicationRoute: typeof CompanyCompanyArchiveCommunicationRoute
  CompanyCompanyArchiveDepartmentsRoute: typeof CompanyCompanyArchiveDepartmentsRoute
  CompanyCompanyArchiveManualsRoute: typeof CompanyCompanyArchiveManualsRoute
  CompanyCompanyArchivePerformanceRoute: typeof CompanyCompanyArchivePerformanceRoute
  CompanyCompanyArchiveRewardsRoute: typeof CompanyCompanyArchiveRewardsRoute
  CompanyCompanyArchiveRolesRoute: typeof CompanyCompanyArchiveRolesRoute
  CompanyCompanyTeamCompetenciesBoardRoute: typeof CompanyCompanyTeamCompetenciesBoardRoute
  CompanyCompanyTeamEvaluationsRoute: typeof CompanyCompanyTeamEvaluationsRoute
  CompanyCompanyTeamFeedbacksRoute: typeof CompanyCompanyTeamFeedbacksRoute
  CompanyCompanyTeamGeneralRegisterRoute: typeof CompanyCompanyTeamGeneralRegisterRoute
}

const CompanyCompanyRouteChildren: CompanyCompanyRouteChildren = {
  CompanyCompanyProfileRoute: CompanyCompanyProfileRoute,
  CompanyCompanyIndexRoute: CompanyCompanyIndexRoute,
  CompanyCompanySettingsSettingsRoute:
    CompanyCompanySettingsSettingsRouteWithChildren,
  CompanyCompanyArchiveBenefitsRoute: CompanyCompanyArchiveBenefitsRoute,
  CompanyCompanyArchiveCommunicationRoute:
    CompanyCompanyArchiveCommunicationRoute,
  CompanyCompanyArchiveDepartmentsRoute: CompanyCompanyArchiveDepartmentsRoute,
  CompanyCompanyArchiveManualsRoute: CompanyCompanyArchiveManualsRoute,
  CompanyCompanyArchivePerformanceRoute: CompanyCompanyArchivePerformanceRoute,
  CompanyCompanyArchiveRewardsRoute: CompanyCompanyArchiveRewardsRoute,
  CompanyCompanyArchiveRolesRoute: CompanyCompanyArchiveRolesRoute,
  CompanyCompanyTeamCompetenciesBoardRoute:
    CompanyCompanyTeamCompetenciesBoardRoute,
  CompanyCompanyTeamEvaluationsRoute: CompanyCompanyTeamEvaluationsRoute,
  CompanyCompanyTeamFeedbacksRoute: CompanyCompanyTeamFeedbacksRoute,
  CompanyCompanyTeamGeneralRegisterRoute:
    CompanyCompanyTeamGeneralRegisterRoute,
}

const CompanyCompanyRouteWithChildren = CompanyCompanyRoute._addFileChildren(
  CompanyCompanyRouteChildren,
)

interface DashboardDashboardRouteChildren {
  DashboardDashboardDocsRoute: typeof DashboardDashboardDocsRoute
  DashboardDashboardInvitesRoute: typeof DashboardDashboardInvitesRoute
  DashboardDashboardProfileRoute: typeof DashboardDashboardProfileRoute
  DashboardDashboardIndexRoute: typeof DashboardDashboardIndexRoute
}

const DashboardDashboardRouteChildren: DashboardDashboardRouteChildren = {
  DashboardDashboardDocsRoute: DashboardDashboardDocsRoute,
  DashboardDashboardInvitesRoute: DashboardDashboardInvitesRoute,
  DashboardDashboardProfileRoute: DashboardDashboardProfileRoute,
  DashboardDashboardIndexRoute: DashboardDashboardIndexRoute,
}

const DashboardDashboardRouteWithChildren =
  DashboardDashboardRoute._addFileChildren(DashboardDashboardRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthAuthRoute: AuthAuthRouteWithChildren,
  CompanyCompanyRoute: CompanyCompanyRouteWithChildren,
  DashboardDashboardRoute: DashboardDashboardRouteWithChildren,
  AdminAdminAuthRoute: AdminAdminAuthRoute,
  AdminAdminDashboardRoute: AdminAdminDashboardRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
